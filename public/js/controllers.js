// Generated by CoffeeScript 1.6.1
'use strict';
var AppCtrl, DialogCtrl, SignInCtrl, TimeLineCtrl, UploadCtrl;

DialogCtrl = (function() {

  function DialogCtrl($scope, $http, $dialog) {
    var _this = this;
    this.$scope = $scope;
    this.$http = $http;
    this.$dialog = $dialog;
    this.$scope.opts = {
      templateUrl: 'modal/signIn',
      controller: SignInCtrl
    };
    this.$scope.openSignIn = function() {
      var d;
      d = _this.$dialog.dialog(_this.$scope.opts);
      return d.open().then(function(result) {
        _this.$scope.didSignIn = result;
        return console.log(result);
      });
    };
  }

  DialogCtrl.$inject = ['$scope', '$http', '$dialog'];

  return DialogCtrl;

})();

AppCtrl = (function() {

  function AppCtrl($scope, $http) {
    this.$scope = $scope;
    this.$http = $http;
    this.getName();
  }

  AppCtrl.prototype.getName = function() {
    var _this = this;
    return this.$http({
      method: 'GET',
      url: '/api/name'
    }).success(function(data, status, headers, config) {
      return _this.$scope.name = data.name;
    }).error(function(data, status, headers, config) {
      return _this.$scope.name = 'Error!';
    });
  };

  AppCtrl.$inject = ['$scope', '$http'];

  return AppCtrl;

})();

UploadCtrl = (function() {

  function UploadCtrl($scope, $http, Assignment) {
    var _this = this;
    this.$scope = $scope;
    this.$http = $http;
    this.$scope.assignments = [];
    this.$scope.feedback = [];
    this.$scope.assignments = Assignment.query();
    this.$scope.problems = [];
    this.$scope.$watch("selectedAssignmentId", function() {
      if (_this.$scope.selectedAssignmentId != null) {
        return _this.$scope.selectedAssignment = Assignment.get({
          id: _this.$scope.selectedAssignmentId
        }, function(assignment) {
          _this.$scope.problems = assignment.problems;
          return _this.$scope.postURL = assignment.url;
        });
      }
    });
    this.$scope.$watch("selectedProblemId", function() {
      var chapter;
      if (_this.$scope.selectedProblemId != null) {
        chapter = _this.$scope.selectedProblemId.match(/(\d+)/)[1];
        if (chapter === "1" || chapter === "2") {
          return _this.$scope.selectedChapter = "ch1_2";
        } else {
          return _this.$scope.selectedChapter = "ch" + chapter;
        }
      }
    });
    this.$scope.updateGrade = function(content, complete) {
      _this.$scope.feedback = content.feedback;
      return _this.$scope.grade = content.grade;
    };
  }

  UploadCtrl.$inject = ['$scope', '$http', 'Assignment'];

  return UploadCtrl;

})();

TimeLineCtrl = (function() {

  function TimeLineCtrl($scope, $http, Assignment) {
    this.$scope = $scope;
    this.$http = $http;
    this.$scope.assignments = [];
    this.$scope.assignments = Assignment.query();
  }

  TimeLineCtrl.$inject = ['$scope', '$http', 'Assignment'];

  return TimeLineCtrl;

})();

SignInCtrl = (function() {

  function SignInCtrl($scope, $http, User, dialog) {
    var _this = this;
    this.$scope = $scope;
    this.$http = $http;
    this.dialog = dialog;
    this.$scope.user = {};
    this.$scope.close = function(result) {
      return _this.dialog.close(result);
    };
  }

  SignInCtrl.$inject = ['$scope', '$http', 'User', 'dialog'];

  return SignInCtrl;

})();
