// Generated by CoffeeScript 1.6.1
var RSLBranch;

RSLBranch = (function() {
  var Branch;

  function RSLBranch() {}

  RSLBranch.Branch = Branch = (function() {

    function Branch(branchNumber) {
      this.branchNumber = branchNumber;
      this.topLine = true;
      this.bottomLine = true;
      this.onTopLine = true;
      this.open = true;
    }

    return Branch;

  })();

  RSLBranch.branchInstruction = function(branchAction) {
    return function(matchValues, dataTable) {
      var branchNumber, matchText;
      matchText = matchValues[0], branchNumber = matchValues[1];
      return dataTable = branchAction(dataTable);
    };
  };

  RSLBranch.BST = RSLBranch.branchInstruction(function(dataTable) {
    dataTable.branches = dataTable.branches || [];
    dataTable.branches[branchNumber - 1] = new Branch(branchNumber);
    return dataTable;
  });

  RSLBranch.branchClosing = function(closingType) {
    return this.branchInstruction(function(dataTable) {
      var activeBranch, correctLine, thingToClose;
      activeBranch = dataTable.branches[branchNumber - 1];
      if (closingType === "NXB") {
        correctLine = activeBranch.onTopLine;
        thingToClose = "onTopLine";
      } else {
        correctLine = !activeBranch.onTopLine;
        thingToClose = "open";
      }
      if (correctLine) {
        if (activeBranch.open) {
          activeBranch[thingToClose] = false;
          dataTable.branches[branchNumber - 1] = activeBranch;
          return dataTable;
        } else {
          throw "Encountered " + closingType + " for closed branch";
        }
      } else {
        throw "Unexpected " + closingType;
      }
    });
  };

  RSLBranch.NXB = RSLBranch.branchClosing("NXB");

  RSLBranch.BND = RSLBranch.branchClosing("BND");

  return RSLBranch;

})();
