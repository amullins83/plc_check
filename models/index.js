// Generated by CoffeeScript 1.6.1

(function() {
  "use strict";
  var RSLParser, db, labObject, model, mongoose, problemObject, ready, rungObject, schema;
  Array.prototype.find = function(findObject) {
    var element, found, isMatch, item, key, _i, _j, _len, _len1;
    found = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      item = this[_i];
      isMatch = true;
      for (key = _j = 0, _len1 = findObject.length; _j < _len1; key = ++_j) {
        element = findObject[key];
        if (item[key] !== element) {
          isMatch = false;
          break;
        }
      }
      if (isMatch) {
        found.push(item);
      }
    }
    return found;
  };
  Array.prototype.update = function(findObject, updateObject) {
    var indexToUpdate, objectsFound, objectsToUpdate;
    objectsFound = this.find(findObject);
    if (objectsFound.length !== 0) {
      objectsToUpdate = objectsFound[0];
      indexToUpdate = this.indexOf(objectsToUpdate);
      this[indexToUpdate] = updateObject;
      return this[indexToUpdate];
    }
    return false;
  };
  mongoose = require("mongoose");
  if (process.env.test) {
    mongoose.connect("mongodb://localhost/test");
  } else {
    mongoose.connect("mongodb://" + process.env.MONGOLABS_USER + ":" + process.env.MONGOLABS_PASS + "@ds061787.mongolab.com:61787/heroku_app15454729");
  }
  model = mongoose.model;
  schema = mongoose.Schema;
  db = exports.db = mongoose.connection;
  exports.labObject = labObject = {
    name: String,
    date: Date,
    uploadURL: String,
    problems: Array
  };
  exports.problemObject = problemObject = {
    name: String,
    rungs: Array,
    score: Number,
    lab: String
  };
  exports.rungObject = rungObject = {
    value: String,
    problem: String
  };
  exports.ready = ready = function(handler) {
    return db.once("open", handler);
  };
  RSLParser = exports.RSLParser = require("./RSLParser.coffee");
  return ready(function() {
    var Lab, Problem, Rung;
    Lab = exports.Lab = mongoose.model("Lab", mongoose.Schema(labObject));
    Problem = exports.Problem = mongoose.model("Problem", mongoose.Schema(problemObject));
    Rung = exports.Rung = mongoose.model("Rung", mongoose.Schema(rungObject));
    Rung.prototype.run = function(inputObject) {
      var instruction, instructions, item, outputObject, result, _i, _j, _len, _len1;
      outputObject = {};
      for (_i = 0, _len = inputObject.length; _i < _len; _i++) {
        item = inputObject[_i];
        outputObject[item] = inputObject[item];
      }
      instructions = this.value.split(" ");
      for (_j = 0, _len1 = instructions.length; _j < _len1; _j++) {
        instruction = instructions[_j];
        result = RSLParser.execute(instruction, outputObject);
        if (result !== null) {
          outputObject = result;
        } else {
          break;
        }
      }
      return outputObject;
    };
    return "All systems go";
  });
}).call(this);
