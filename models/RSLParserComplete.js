// Generated by CoffeeScript 1.6.1
var RSLBranch, RSLCounterTimer, RSLInput, RSLLogical, RSLOneShot, RSLOutput, RSLParser, RSLStartEnd,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RSLStartEnd = (function() {

  function RSLStartEnd() {}

  RSLStartEnd.SOR = function(matchValues, dataTable) {
    var matchText, rungNumber;
    matchText = matchValues[0], rungNumber = matchValues[1];
    dataTable.rungs = dataTable.rungs || [];
    dataTable.rungs.push(rungNumber);
    dataTable.activeRung = rungNumber;
    dataTable.rungOpen = true;
    dataTable.programOpen = true;
    return dataTable;
  };

  RSLStartEnd.ending = function(lastAction, errorMessage) {
    if (errorMessage == null) {
      errorMessage = "EOR does not match SOR";
    }
    return function(matchValues, dataTable) {
      var matchText, rungNumber;
      matchText = matchValues[0], rungNumber = matchValues[1];
      if (rungNumber === dataTable.activeRung) {
        dataTable.rungOpen = false;
        if (typeof lastAction === "Function") {
          lastAction;
        }
        return dataTable;
      } else {
        throw "EOR does not match SOR";
      }
    };
  };

  RSLStartEnd.EOR = RSLStartEnd.ending;

  RSLStartEnd.END = RSLStartEnd.ending(function() {
    return dataTable.programOpen = false;
  }, "END does not match SOR");

  return RSLStartEnd;

})();

RSLOutput = (function() {

  function RSLOutput() {}

  RSLOutput.bitwiseOutput = function(set, latchAction) {
    if (latchAction == null) {
      latchAction = function() {};
    }
    return function(matchValues, dataTable) {
      var bit, file, matchText, rank;
      matchText = matchValues[0], file = matchValues[1], rank = matchValues[2], bit = matchValues[3];
      dataTable[file] = dataTable[file] || {};
      dataTable[file][rank] = dataTable[file][rank] || {};
      dataTable[file][rank][bit] = set;
      return dataTable = latchAction(dataTable);
    };
  };

  RSLOutput.OTE = RSLOutput.bitwiseOutput(true);

  RSLOutput.OTL = RSLOutput.bitwiseOutput(true, function(dataTable) {
    dataTable["latch"] = dataTable["latch"] || [];
    if (dataTable["latch"].indexOf({
      file: file,
      rank: rank,
      bit: bit
    } === -1)) {
      dataTable["latch"].push({
        file: file,
        rank: rank,
        bit: bit
      });
    }
    return dataTable;
  });

  RSLOutput.OTU = RSLOutput.bitwiseOutput(false, function(dataTable) {
    var removeIndex;
    if (dataTable["latch"] != null) {
      removeIndex = dataTable["latch"].indexOf({
        file: file,
        rank: rank,
        bit: bit
      });
    }
    if (removeIndex !== -1) {
      dataTable.splice(removeIndex, 1);
    }
    return dataTable;
  });

  return RSLOutput;

})();

RSLOneShot = (function() {

  function RSLOneShot() {}

  RSLOneShot.OSR = function(matchValues, dataTable) {
    var bit, file, findObject, foundOneShots, matchText, rank;
    matchText = matchValues[0], file = matchValues[1], rank = matchValues[2], bit = matchValues[3];
    if (dataTable[file][rank][bit]) {
      return false;
    } else {
      dataTable[file][rank][bit] = true;
      dataTable["oneShots"] = dataTable["oneShots"] || [];
      findObject = {
        file: file,
        rank: rank,
        bit: bit
      };
      foundOneShots = dataTable["oneShots"].find(findObject);
      if (foundOneShots.length === 0) {
        dataTable["oneShots"].push({
          file: file,
          rank: rank,
          bit: bit,
          active: true
        });
      } else {
        dataTable["oneShots"].update(findObject, {
          file: file,
          rank: rank,
          bit: bit,
          active: true
        });
      }
      return dataTable;
    }
  };

  return RSLOneShot;

})();

RSLLogical = (function() {

  function RSLLogical() {}

  RSLLogical.Logical = function(bitwiseFunction) {
    return function(matchValues, dataTable) {
      var destFile, destRank, i, matchText, sourceAfile, sourceArank, sourceBfile, sourceBrank, _i, _len, _ref;
      matchText = matchValues[0], sourceAfile = matchValues[1], sourceArank = matchValues[2], sourceBfile = matchValues[3], sourceBrank = matchValues[4], destFile = matchValues[5], destRank = matchValues[6];
      dataTable[destFile] = dataTable[destFile] || {};
      dataTable[destFile][destRank] = dataTable[destFile][destRank] || {};
      _ref = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        dataTable[sourceAfile][sourceArank][i] = dataTable[sourceAfile][sourceArank][i] || 0;
        dataTable[sourceBfile][sourceBrank][i] = dataTable[sourceBfile][sourceBrank][i] || 0;
        dataTable[destFile][destRank][i] = bitwiseFunction(dataTable[sourceAfile][sourceArank][i], dataTable[sourceBfile][sourceBrank][i]);
      }
      return dataTable;
    };
  };

  RSLLogical.AND = RSLLogical.Logical(function(a, b) {
    return a && b;
  });

  RSLLogical.OR = RSLLogical.Logical(function(a, b) {
    return a || b;
  });

  RSLLogical.XOR = RSLLogical.Logical(function(a, b) {
    return a ^ b;
  });

  RSLLogical.NOT = RSLLogical.Logical(function(a, b) {
    return !a;
  });

  return RSLLogical;

})();

RSLInput = (function() {

  function RSLInput() {}

  RSLInput.bitwiseInput = function(bitwiseFunction) {
    return function(matchValues, dataTable) {
      var bit, file, matchText, rank;
      matchText = matchValues[0], file = matchValues[1], rank = matchValues[2], bit = matchValues[3];
      if (bitwiseFunction(dataTable[file][rank][bit])) {
        return dataTable;
      } else {
        return false;
      }
    };
  };

  RSLInput.XIC = RSLInput.bitwiseInput(function(bit) {
    return bit === true || bit === 1;
  });

  RSLInput.XIO = RSLInput.bitwiseInput(function(bit) {
    return bit === false || bit === 0;
  });

  return RSLInput;

})();

RSLCounterTimer = (function() {
  var Counter, CounterTimer, Timer;

  function RSLCounterTimer() {}

  RSLCounterTimer.CounterTimer = CounterTimer = (function() {

    function CounterTimer(number, preset) {
      this.number = number;
      this.preset = preset;
      this.acc = 0;
      this.en = true;
      this.dn = this.done();
    }

    CounterTimer.prototype.tickUp = function() {
      this.acc++;
      return this.dn = this.done();
    };

    CounterTimer.prototype.tickDown = function() {
      this.acc--;
      return this.dn = this.done();
    };

    CounterTimer.prototype.done = function() {
      return this.acc >= this.preset;
    };

    return CounterTimer;

  })();

  RSLCounterTimer.Counter = Counter = (function(_super) {

    __extends(Counter, _super);

    function Counter() {
      return Counter.__super__.constructor.apply(this, arguments);
    }

    Counter.prototype.CU = function() {
      this.tickUp();
      return this.cu = true;
    };

    Counter.prototype.CD = function() {
      this.tickDown();
      return this.cu = true;
    };

    Counter.prototype.OV = function() {};

    Counter.prototype.UV = function() {};

    return Counter;

  })(RSLCounterTimer.CounterTimer);

  RSLCounterTimer.Timer = Timer = (function(_super) {

    __extends(Timer, _super);

    function Timer() {
      return Timer.__super__.constructor.apply(this, arguments);
    }

    Timer.prototype.tick = function() {
      if (!this.done()) {
        this.tickUp();
        return this.tt = true;
      } else {
        return this.tt = false;
      }
    };

    return Timer;

  })(RSLCounterTimer.CounterTimer);

  RSLCounterTimer.counterTimerInstruction = function(file, action) {
    return function(matchValues, dataTable) {
      var number, preset, unit;
      number = matchValues[0], preset = matchValues[1];
      dataTable[file] = dataTable[file] || {};
      dataTable[file][number] = dataTable[file][number] || new this.CounterTimer(number, preset);
      unit = dataTable[file][number];
      return dataTable = action(unit);
    };
  };

  RSLCounterTimer.timerInstruction = function(timerAction) {
    return this.counterTimerInstruction("T4", timerAction);
  };

  RSLCounterTimer.TON = RSLCounterTimer.timerInstruction(function(timer) {});

  RSLCounterTimer.TOF = RSLCounterTimer.timerInstruction(function(timer) {});

  RSLCounterTimer.RTO = RSLCounterTimer.timerInstruction(function(timer) {});

  RSLCounterTimer.RES = function(matchValues, dataTable) {
    var file, matchText, rank;
    matchText = matchValues[0], file = matchValues[1], rank = matchValues[2];
    return dataTable[file][rank].acc = 0;
  };

  RSLCounterTimer.counterInstruction = function(counterAction) {
    return this.counterTimerInstruction("C5", counterAction);
  };

  RSLCounterTimer.CTU = RSLCounterTimer.counterInstruction(function(counter) {});

  RSLCounterTimer.CTD = RSLCounterTimer.counterInstruction(function(counter) {});

  return RSLCounterTimer;

})();

RSLBranch = (function() {
  var Branch;

  function RSLBranch() {}

  RSLBranch.Branch = Branch = (function() {

    function Branch(branchNumber) {
      this.branchNumber = branchNumber;
      this.topLine = true;
      this.bottomLine = true;
      this.onTopLine = true;
      this.open = true;
    }

    return Branch;

  })();

  RSLBranch.branchInstruction = function(branchAction) {
    return function(matchValues, dataTable) {
      var branchNumber, matchText;
      matchText = matchValues[0], branchNumber = matchValues[1];
      return dataTable = branchAction(dataTable);
    };
  };

  RSLBranch.BST = RSLBranch.branchInstruction(function(dataTable) {
    dataTable.branches = dataTable.branches || [];
    dataTable.branches[branchNumber - 1] = new Branch(branchNumber);
    return dataTable;
  });

  RSLBranch.branchClosing = function(closingType) {
    return this.branchInstruction(function(dataTable) {
      var activeBranch, correctLine, thingToClose;
      activeBranch = dataTable.branches[branchNumber - 1];
      if (closingType === "NXB") {
        correctLine = activeBranch.onTopLine;
        thingToClose = "onTopLine";
      } else {
        correctLine = !activeBranch.onTopLine;
        thingToClose = "open";
      }
      if (correctLine) {
        if (activeBranch.open) {
          activeBranch[thingToClose] = false;
          dataTable.branches[branchNumber - 1] = activeBranch;
          return dataTable;
        } else {
          throw "Encountered " + closingType + " for closed branch";
        }
      } else {
        throw "Unexpected " + closingType;
      }
    });
  };

  RSLBranch.NXB = RSLBranch.branchClosing("NXB");

  RSLBranch.BND = RSLBranch.branchClosing("BND");

  return RSLBranch;

})();

RSLParser = (function() {

  function RSLParser() {}

  RSLParser.functionMap = {
    "SOR,(\\d+)": RSLStartEnd.SOR,
    "EOR,(\\d+)": RSLStartEnd.EOR,
    "END,(\\d+)": RSLStartEnd.END,
    "XIC,(\\w+):(\\d+)\\/(\\d{1,2})": RSLInput.XIC,
    "XIO,(\\w+):(\\d+)\\/(\\d{1,2})": RSLInput.XIO,
    "OTE,(\\w+):(\\d+)\\/(\\d{1,2})": RSLOutput.OTE,
    "OTL,(\\w+):(\\d+)\\/(\\d{1,2})": RSLOutput.OTL,
    "OTU,(\\w+):(\\d+)\\/(\\d{1,2})": RSLOutput.OTU,
    "OSR,(\\w+):(\\d+)\\/(\\d{1,2})": RSLOneShot.OSR,
    "BST,(\\d+)": RSLBranch.BST,
    "NXB,(\\d+)": RSLBranch.NXB,
    "BND,(\\d+)": RSLBranch.BND,
    "AND,(\\w+):(\\d+),(\\w+):(\\d+),(\\w+):(\\d+)": RSLLogical.AND,
    "OR,(\\w+):(\\d+),(\\w+):(\\d+),(\\w+):(\\d+)": RSLLogical.OR,
    "XOR,(\\w+):(\\d+),(\\w+):(\\d+),(\\w+):(\\d+)": RSLLogical.XOR,
    "NOT,(\\w+):(\\d+),(\\w+):(\\d+)": RSLLogical.NOT,
    "TON,T4:(\\d+),(\\d+)": RSLCounterTimer.TON,
    "TOF,T4:(\\d+),(\\d+)": RSLCounterTimer.TOF,
    "RTO,T4:(\\d+),(\\d+)": RSLCounterTimer.RTO,
    "RES,(\\w+):(\\d+)": RSLCounterTimer.RES,
    "CTU,C5:(\\d+),(\\d+)": RSLCounterTimer.CTU,
    "CTD,C5:(\\d+),(\\d+)": RSLCounterTimer.CTD
  };

  RSLParser.execute = function(instruction, dataTable) {
    var f, matchValues, re, _ref;
    _ref = this.functionMap;
    for (re in _ref) {
      f = _ref[re];
      matchValues = instruction.match(new RegExp(re));
      if (matchValues != null) {
        dataTable = f(matchValues, dataTable);
      }
    }
    return dataTable;
  };

  return RSLParser;

})();

module.exports = RSLParser;
